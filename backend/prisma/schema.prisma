// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  username         String     @unique
  email            String?    @unique
  password         String
  name             String?
  image            String?
  blocked          Boolean    @default(false)
  refreshToken     String?
  role             Role?      @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId           Int?
  orders           Order[]    @relation(name: "Orders")
  createdCustomers Customer[] @relation(name: "CreatedCustomers")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @default("")
  user        User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Int      @default(0)
  description String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderDetail {
  id          String   @id @default(uuid())
  name        String
  price       Int      @default(0)
  width       Int      @default(0)
  height      Int      @default(0)
  qty         Int      @default(0)
  design      Int      @default(0)
  eyelets     Boolean  @default(false)
  shiming     Boolean  @default(false)
  description String?
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id           String        @id @default(uuid())
  number       String        @unique()
  date         DateTime
  customer     String
  description  String?       @default("")
  orderDetails OrderDetail[]
  user         User?         @relation(fields: [userId], references: [id], name: "Orders", onDelete: SetNull)
  userId       Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Customer {
  id          String   @id @default(uuid())
  name        String   @unique()
  address     String?  @default("")
  contact     String?  @default("")
  email       String?  @default("")
  description String?  @default("")
  createdBy   User?    @relation(fields: [createdById], references: [id], name: "CreatedCustomers", onDelete: SetNull)
  createdById Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
