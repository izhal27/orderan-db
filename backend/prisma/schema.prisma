// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  username         String          @unique
  email            String?         @unique
  password         String
  name             String?
  image            String?
  blocked          Boolean         @default(false)
  refreshToken     String?
  role             Role?           @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId           Int?
  Orders           Order[]         @relation(name: "Orders")
  CreatedCustomers Customer[]      @relation(name: "CreatedCustomers")
  PrintedOrders    PrintedStatus[] @relation(name: "PrintedOrders")
  MarkedPays       PayStatus[]     @relation(name: "MarkedPays")
  MarkedTakens     TakenStatus[]   @relation(name: "MarkedTakens")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @default("")
  User        User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Int      @default(0)
  description String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderDetail {
  id              String         @id @default(uuid())
  name            String
  price           Int            @default(0)
  width           Int            @default(0)
  height          Int            @default(0)
  qty             Int            @default(0)
  design          Int            @default(0)
  eyelets         Boolean        @default(false)
  shiming         Boolean        @default(false)
  description     String?
  Order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  markedPrintered PrintedStatus?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Order {
  id           String        @id @default(uuid())
  number       String        @unique()
  date         DateTime
  customer     String
  description  String?       @default("")
  OrderDetails OrderDetail[]
  user         User?         @relation(fields: [userId], references: [id], name: "Orders", onDelete: SetNull)
  userId       Int?
  MarkedPay    PayStatus?
  MarkedTaken  TakenStatus?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Customer {
  id          String   @id @default(uuid())
  name        String   @unique()
  address     String?  @default("")
  contact     String?  @default("")
  email       String?  @default("")
  description String?  @default("")
  CreatedBy   User?    @relation(fields: [createdById], references: [id], name: "CreatedCustomers", onDelete: SetNull)
  createdById Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PrintedStatus {
  id            String      @id @default(uuid())
  status        Boolean     @default(true)
  printAt       DateTime    @default(now())
  description   String?     @default("")
  OrderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id], onDelete: Cascade)
  orderDetailId String      @unique
  PrintedBy     User?       @relation(fields: [printedById], references: [id], name: "PrintedOrders", onDelete: SetNull)
  printedById   Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PayStatus {
  id          String   @id @default(uuid())
  status      Boolean  @default(true)
  payAt       DateTime @default(now())
  description String?  @default("")
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String   @unique
  MarkedBy    User?    @relation(fields: [markedById], references: [id], name: "MarkedPays", onDelete: SetNull)
  markedById  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TakenStatus {
  id          String   @id @default(uuid())
  status      Boolean  @default(true)
  takenAt     DateTime @default(now())
  description String?  @default("")
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String   @unique
  MarkedBy    User?    @relation(fields: [markedById], references: [id], name: "MarkedTakens", onDelete: SetNull)
  markedById  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
